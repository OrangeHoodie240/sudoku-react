{"version":3,"sources":["logo.svg","SudokuCell/SudokuCell.js","SudokuGrid/SudokuGrid.js","helpers.js","SudokuPad/SudokuPad.js","MagnifiedCell/MagnifiedCell.js","SudokuBoard/SudokuBoard.js","App.js","reportWebVitals.js","index.js"],"names":["SudokuCell","cellRow","cellCol","value","given","outerCell","React","useRef","notGiven","upperCellClasses","useEffect","current","document","getElementById","id","className","SudokuGrid","setSelectedCell","sudoku","originalSudoku","invalidCell","hintCell","setHintCell","gridDiv","gridArray","i","j","push","onClick","target","parentElement","classList","remove","getAttribute","querySelector","focus","children","childrenLength","length","selectedCell","child","add","level","a","url","fetch","then","resp","ok","Error","status","json","data","catch","err","console","error","puzzle","flattenPuzzle","flatPuzzle","join","copySudoku","copy","row","getPuzzle","SudokuPad","setSudoku","update","cellValuesToggleButton","notesToggleButton","sudokuPadValues","sudokuPadNotes","onClickSudokuPadToggle","evt","setAttribute","removeAttribute","style","display","addEventListener","valueDivs","noteDivs","disabled","tabindex","contains","Number","col","upperCellOfSelectedCell","innerText","trim","onKeyUp","key","includes","lowerCellOfSelectedCell","noteValue","lowerCellNotes","Math","random","lowerCellNotesLength","split","splice","sort","MagnifiedCell","SudokuBoard","useState","setInvalidCell","valid","setValid","orignialSudoku","hintButton","testIfInvalid","reduce","b","areDuplicates","boxes","rowA","rowB","rowC","k","isBoardValid","isBoardFull","alert","resetBoard","cellLength","cell","magnifiedCell","position","solveWith","cellId","hint","loadPuzzle","onChange","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7da968d1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect } from 'react';\r\nimport './SudokuCell.css';\r\n\r\n\r\nconst SudokuCell = ({cellRow, cellCol, value=5, given})=>{\r\n    let outerCell = React.useRef(null);\r\n    const notGiven = !given;\r\n    const upperCellClasses = (given) ? 'upper-cell given' : 'upper-cell';     \r\n\r\n    React.useEffect(()=>{\r\n        outerCell.current = document.getElementById('sudoku-cell-' + cellRow + '-' + cellCol);\r\n    }, []); \r\n\r\n    return (<>\r\n                        <div id={'sudoku-cell-' + cellRow + '-' + cellCol} data-row={cellRow} data-col={cellCol} className='outer-cell' data-not-given={notGiven}>\r\n                            <div className={upperCellClasses}>{(notGiven) ? '' : value}</div>\r\n                            <div className='lower-cell' data-notes=''></div>\r\n                        </div>\r\n                    \r\n            </>);\r\n}; \r\n\r\n\r\n\r\nexport default SudokuCell;","import React from \"react\";\r\nimport SudokuCell from \"../SudokuCell/SudokuCell\";\r\nimport './SudokuGrid.css';\r\n\r\n\r\nconst SudokuGrid = ({ setSelectedCell, sudoku, originalSudoku, invalidCell, hintCell, setHintCell }) => {\r\n    const gridDiv = React.useRef(null);\r\n\r\n\r\n    function onClick({ target }) {\r\n        if (target !== gridDiv) {\r\n            target = target.parentElement;\r\n            if(hintCell && hintCell !== target){\r\n                    hintCell.classList.remove('hintCell'); \r\n                    setHintCell(null);\r\n            }\r\n\r\n            if (target.getAttribute('data-not-given') === 'false') return;\r\n\r\n            if (invalidCell && target !== invalidCell) {\r\n                document.querySelector('.sudoku-pad-values').focus();\r\n                return;\r\n            }\r\n\r\n            const children = gridDiv.current.children;\r\n            const childrenLength = children.length;\r\n            let selectedCell = null;\r\n            for (let i = 0; i < childrenLength; i++) {\r\n                const child = children[i];\r\n                if (child === target) {\r\n                    child.classList.add('selected-cell');\r\n                    selectedCell = child;\r\n                }\r\n                else {\r\n                    child.classList.remove('selected-cell');\r\n                }\r\n\r\n            }\r\n            setSelectedCell(selectedCell);\r\n            document.querySelector('.sudoku-pad-values').focus();\r\n        }\r\n    }\r\n\r\n\r\n    const gridArray = [];\r\n    for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n            let given = (originalSudoku[i][j] !== '0') ? true : false;\r\n            gridArray.push(<SudokuCell cellRow={i} cellCol={j} value={sudoku[i][j]} given={given} />);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        gridDiv.current = document.getElementById('grid-div');\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className='grid-hor-bar' id='grid-first-hor-bar'></div>\r\n            <div className='grid-hor-bar' id='grid-second-hor-bar'></div>\r\n            <div className='grid-ver-bar' id='grid-first-ver-bar'></div>\r\n            <div className='grid-ver-bar' id='grid-second-ver-bar'></div>\r\n            <div className='grid-div' id='grid-div' onClick={onClick}>\r\n                {gridArray}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default SudokuGrid;","\r\n\r\nasync function getPuzzle(level) {\r\n    const url = 'https://steven-sudoku-api.herokuapp.com/sudoku?level=' + level;\r\n    const puzzle = await fetch(url)\r\n        .then(resp => {\r\n            if (!resp.ok) {\r\n                throw new Error(\"Error! Status:\", resp.status);\r\n            }\r\n            return resp.json();\r\n        })\r\n        .then(data => {\r\n            return data.data;\r\n        })\r\n        .catch(err => console.error(err));\r\n\r\n    return puzzle;\r\n}\r\n\r\nfunction flattenPuzzle(puzzle){\r\n    let flatPuzzle = [];\r\n    for(let i = 0; i < 9; i++){\r\n        flatPuzzle.push(...puzzle[i]);\r\n    }\r\n\r\n    return flatPuzzle.join(',');\r\n}\r\n\r\nfunction copySudoku(sudoku) {\r\n    const copy = [];\r\n    for (let i = 0; i < 9; i++) {\r\n        const row = [];\r\n        for (let j = 0; j < 9; j++) {\r\n            row.push(sudoku[i][j]);\r\n        }\r\n        copy.push(row);\r\n    }\r\n    return copy;\r\n}\r\n\r\nfunction isBoardFull(sudoku) {\r\n    for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n            if (sudoku[i][j] === '0') return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction isBoardValid(sudoku) {\r\n    // check by rows\r\n    for (let i = 0; i < 9; i++) {\r\n        let row = sudoku[i];\r\n\r\n        // test if any duplicates occur\r\n        const count = row.reduce((a, b) => {\r\n            if (b === '0') return a;\r\n            if (a[b]) {\r\n                a.areDuplicates = true;\r\n            }\r\n            else {\r\n                a[b] = 1;\r\n            }\r\n            return a;\r\n        }, {});\r\n\r\n        if (count.areDuplicates) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n        // get columns\r\n        let col = [];\r\n        for (let j = 0; j < 9; j++) {\r\n            col.push(sudoku[j][i]);\r\n        }\r\n\r\n        // test if any duplicates occur\r\n        const count = col.reduce((a, b) => {\r\n            if (b === '0') return a;\r\n            if (a[b]) {\r\n                a.areDuplicates = true;\r\n            }\r\n            else {\r\n                a[b] = 1;\r\n            }\r\n            return a;\r\n        }, {});\r\n\r\n        if (count.areDuplicates) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < 9; i += 3) {\r\n        // get boxes\r\n        let boxes = [[], [], []];\r\n        for (let j = 0; j < 3; j++) {\r\n            const rowA = [];\r\n            const rowB = [];\r\n            const rowC = [];\r\n            for (let k = 0; k < 3; k++) {\r\n                rowA.push(sudoku[j + i][k]);\r\n                rowB.push(sudoku[j + i][k + 3]);\r\n                rowC.push(sudoku[j + i][k + 6]);\r\n\r\n            }\r\n            boxes[0].push(...rowA);\r\n            boxes[1].push(...rowB);\r\n            boxes[2].push(...rowC);\r\n        }\r\n        for (let box of boxes) {\r\n            //test if any duplicates occur \r\n            // test if any duplicates occur\r\n            const count = box.reduce((a, b) => {\r\n                if (b === '0') return a;\r\n                if (a[b]) {\r\n                    a.areDuplicates = true;\r\n                }\r\n                else {\r\n                    a[b] = 1;\r\n                }\r\n                return a;\r\n            }, {});\r\n\r\n            if (count.areDuplicates) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport default getPuzzle;\r\nexport { copySudoku, isBoardFull, isBoardValid, flattenPuzzle };","import React from \"react\";\r\nimport './SudokuPad.css';\r\nimport { copySudoku } from '../helpers';\r\n\r\n\r\nconst SudokuPad = ({ selectedCell, sudoku, setSudoku, update }) => {\r\n    const cellValuesToggleButton = React.useRef(null);\r\n    const notesToggleButton = React.useRef(null);\r\n    const sudokuPadValues = React.useRef(null);\r\n    const sudokuPadNotes = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n        cellValuesToggleButton.current = document.getElementById('sudoku-pad-cell-values-toggle-button');\r\n        cellValuesToggleButton.current.addEventListener('click', onClickSudokuPadToggle);\r\n        notesToggleButton.current = document.getElementById('sudoku-pad-notes-toggle-button');\r\n        sudokuPadValues.current = document.getElementById('sudoku-pad-values');\r\n        sudokuPadNotes.current = document.getElementById('sudoku-pad-notes');\r\n        sudokuPadNotes.current.style.display = 'none';\r\n    }, [])\r\n\r\n    function onClickValue({ target }) {\r\n        if (!target.classList.contains('sudoku-pad-digit-button')) return;\r\n        if (!selectedCell) return;\r\n        const row = Number(selectedCell.getAttribute('data-row'));\r\n        const col = Number(selectedCell.getAttribute('data-col'));\r\n\r\n        const upperCellOfSelectedCell = selectedCell.children[0];\r\n        const value = target.innerText;\r\n        if (upperCellOfSelectedCell.innerText.trim() === value) {\r\n            upperCellOfSelectedCell.innerText = '';\r\n            sudoku[row][col] = '0';\r\n            setSudoku(copySudoku(sudoku));\r\n            return;\r\n        }\r\n\r\n        upperCellOfSelectedCell.innerText = value;\r\n        sudoku[row][col] = value;\r\n        setSudoku(copySudoku(sudoku));\r\n    }\r\n\r\n\r\n    function onKeyUp(evt) {\r\n        if (!selectedCell) return;\r\n        const key = evt.key;\r\n        if (!['1', '2', '3', '4', '5', '6', '7', '8', '9'].includes(key)) {\r\n            return;\r\n        }\r\n        const row = Number(selectedCell.getAttribute('data-row'));\r\n        const col = Number(selectedCell.getAttribute('data-col'));\r\n        const upperCellOfSelectedCell = selectedCell.children[0];\r\n        if (upperCellOfSelectedCell.innerText.trim() === key) {\r\n            upperCellOfSelectedCell.innerText = '';\r\n            sudoku[row][col] = '0';\r\n            setSudoku(copySudoku(sudoku));\r\n            return;\r\n        }\r\n        upperCellOfSelectedCell.innerText = key;\r\n        sudoku[row][col] = key;\r\n        setSudoku(copySudoku(sudoku));\r\n    }\r\n\r\n    function onClickNote({ target }) {\r\n        if (!target.classList.contains('sudoku-pad-digit-button')) return;\r\n        if (!selectedCell) return;\r\n\r\n        const lowerCellOfSelectedCell = selectedCell.children[1];\r\n        const noteValue = target.innerText.trim();\r\n        let lowerCellNotes = lowerCellOfSelectedCell.getAttribute('data-notes');\r\n        if (!lowerCellNotes) {\r\n            lowerCellOfSelectedCell.setAttribute('data-notes', noteValue);\r\n            lowerCellOfSelectedCell.innerText = noteValue;\r\n            update(Math.random());\r\n            return;\r\n        }\r\n        lowerCellNotes = lowerCellNotes.split(',');\r\n        let lowerCellNotesLength = lowerCellNotes.length;\r\n        for (let i = 0; i < lowerCellNotesLength; i++) {\r\n            if (lowerCellNotes[i] === noteValue) {\r\n                lowerCellNotes.splice(i, 1);\r\n                lowerCellNotes.sort();\r\n                lowerCellOfSelectedCell.innerText = lowerCellNotes.join(' ');\r\n                lowerCellOfSelectedCell.setAttribute('data-notes', lowerCellNotes.join(','));\r\n                update(Math.random());\r\n                return;\r\n            }\r\n        }\r\n        lowerCellNotes.push(noteValue);\r\n        lowerCellNotes.sort();\r\n        lowerCellOfSelectedCell.innerText = lowerCellNotes.join(' ');\r\n        lowerCellOfSelectedCell.setAttribute('data-notes', lowerCellNotes.join(','));\r\n        update(Math.random());\r\n    }\r\n\r\n\r\n\r\n    function onClickSudokuPadToggle(evt) {\r\n        if (cellValuesToggleButton.current === evt.target) {\r\n            cellValuesToggleButton.current.setAttribute('disabled', true);\r\n            notesToggleButton.current.removeAttribute('disabled');\r\n            sudokuPadValues.current.style.display = '';\r\n            sudokuPadNotes.current.style.display = 'none';\r\n\r\n            sudokuPadValues.current.focus();\r\n        }\r\n        else {\r\n            notesToggleButton.current.setAttribute('disabled', true);\r\n            cellValuesToggleButton.current.removeAttribute('disabled');\r\n            sudokuPadNotes.current.style.display = '';\r\n            sudokuPadValues.current.style.display = 'none';\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const valueDivs = [];\r\n    const noteDivs = [];\r\n    for (let i = 1; i < 10; i++) {\r\n        valueDivs.push(<div className='sudoku-pad-digit-button'>{i}</div>);\r\n        noteDivs.push(<div className='sudoku-pad-digit-button' >{i}</div>);\r\n    }\r\n\r\n    return (\r\n        <div className={'sudoku-pad'}>\r\n            <div id='sudoku-pad-buttons'>\r\n                <button id='sudoku-pad-cell-values-toggle-button' disabled>Cell Values</button>\r\n                <button id=\"sudoku-pad-notes-toggle-button\" onClick={onClickSudokuPadToggle} >Notes</button>\r\n            </div>\r\n            <div tabindex='0' onClick={onClickValue} onKeyUp={onKeyUp} id='sudoku-pad-values' className='sudoku-pad-values'>\r\n                {valueDivs}\r\n            </div>\r\n            <div onClick={onClickNote} className='sudoku-pad-notes' id='sudoku-pad-notes'>\r\n                {noteDivs}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default SudokuPad;","import React from 'react';\r\nimport './MagnifiedCell.css'; \r\n\r\n\r\nconst MagnifiedCell = ({selectedCell})=>{\r\n    return (\r\n        <div className='magnified-cell' id='magnified-cell'>\r\n            <div className='magnified-cell-upper-cell'>\r\n                {selectedCell.children[0].innerText}\r\n            </div>\r\n            <div className='magnified-cell-lower-cell'>\r\n                {selectedCell.children[1].innerText}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default MagnifiedCell; ","import React from \"react\";\r\nimport SudokuGrid from \"../SudokuGrid/SudokuGrid\";\r\nimport SudokuPad from \"../SudokuPad/SudokuPad\";\r\nimport MagnifiedCell from \"../MagnifiedCell/MagnifiedCell\";\r\nimport getPuzzle, { copySudoku, isBoardFull, isBoardValid, flattenPuzzle } from \"../helpers\";\r\nimport './SudokuBoard.css';\r\n\r\nconst SudokuBoard = () => {\r\n    const [selectedCell, setSelectedCell] = React.useState(null);\r\n    const [invalidCell, setInvalidCell] = React.useState(null);\r\n    const [valid, setValid] = React.useState(true);\r\n    const orignialSudoku = React.useRef(null);\r\n    const [sudoku, setSudoku] = React.useState(null);\r\n    const [hintCell, setHintCell] = React.useState(null);\r\n\r\n    // hint & Select will change\r\n    const hintButton = React.useRef(null);\r\n    const select = React.useRef(null);\r\n\r\n    // for updating entire board from within child\r\n    const [_, update] = React.useState(null);\r\n\r\n    if (sudoku) {\r\n        const testIfInvalid = isBoardValid(sudoku);\r\n        if (valid && !testIfInvalid) {\r\n            selectedCell.classList.add('invalid-cell');\r\n            setValid(false);\r\n            setInvalidCell(selectedCell);\r\n        }\r\n        else if (!valid && testIfInvalid) {\r\n            invalidCell.classList.remove('invalid-cell');\r\n            setValid(true);\r\n            setInvalidCell(null);\r\n        }\r\n\r\n        if (isBoardFull(sudoku) && valid) {\r\n            alert('you win!');\r\n        }\r\n    }\r\n\r\n    function resetBoard(){\r\n        // reset grid\r\n        const gridDiv =  document.querySelector('#grid-div');\r\n        let children  = gridDiv.children; \r\n        let cellLength = children.length;\r\n        for(let i = 0; i < cellLength; i++){\r\n            const cell = children[i]; \r\n            cell.children[0].innerText = ''; \r\n            cell.children[1].innerText = ''; \r\n        } \r\n\r\n        // reset selectedCell\r\n        if(selectedCell){\r\n            selectedCell.classList.remove('selected-cell');\r\n            setSelectedCell(null);\r\n        }\r\n\r\n        // reset hintCell \r\n        if(hintCell){\r\n            hintCell.classList.remove('hintCell');\r\n            setHintCell(null); \r\n        }\r\n\r\n        // reset magnified cell\r\n        const magnifiedCell = document.getElementById('magnified-cell');\r\n        if(magnifiedCell){\r\n            magnifiedCell.children[0].innerText = '';\r\n            magnifiedCell.children[1].innerText = '';\r\n        }\r\n\r\n    }\r\n\r\n    async function getHint(evt){\r\n        const flatPuzzle = flattenPuzzle(sudoku); \r\n        const url = 'https://steven-sudoku-api.herokuapp.com/sudoku/analysis?puzzle=' + flatPuzzle;\r\n        const {position, value, solveWith} = await fetch(url)\r\n            .then(resp => {\r\n                if(!resp.ok){\r\n                    throw new Error('Error! Status:', resp.status); \r\n                }\r\n                return resp.json(); \r\n            })\r\n            .then(data =>{ \r\n                return data.data;\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n        const cellId = '#sudoku-cell-' + (position[0] - 1) + '-' + (position[1] - 1);\r\n        const cell = document.querySelector(cellId);\r\n        \r\n        if(hintCell){\r\n            hintCell.classList.remove('hintCell'); \r\n            setHintCell(null);\r\n            return;\r\n        }\r\n\r\n        cell.classList.add('hintCell');\r\n        setHintCell(cell);\r\n        if(selectedCell){\r\n            selectedCell.classList.remove('selected-cell');\r\n        }\r\n        setSelectedCell(cell);\r\n        \r\n        document.querySelector('#sudoku-pad-values').focus();\r\n        let hint = 'row: ' + position[0] +' col: ' + position[1] + ' can be solved with: ' + solveWith + ' to value: ' + value;\r\n        alert(hint); \r\n    }\r\n\r\n    async function selectPuzzle(evt){\r\n        let level = evt.target.value; \r\n        const puzzle = await getPuzzle(level); \r\n        orignialSudoku.current = puzzle;\r\n        resetBoard(); \r\n        setSudoku(copySudoku(puzzle));\r\n    }\r\n\r\n\r\n    React.useEffect(()=>{\r\n        async function loadPuzzle(){\r\n            const puzzle = await getPuzzle('one');\r\n            orignialSudoku.current = puzzle; \r\n            setSudoku(copySudoku(puzzle));\r\n        }\r\n        loadPuzzle();\r\n        hintButton.current = document.getElementById('hint-button'); \r\n    }, []);\r\n\r\n    if(!sudoku) return '';\r\n\r\n    return (\r\n        <div className='sudoku-board'>\r\n            <div className='sudoku-board-sudoku-grid'>\r\n                <SudokuGrid setHintCell={setHintCell} hintCell={hintCell} setSelectedCell={setSelectedCell} invalidCell={invalidCell} sudoku={sudoku} originalSudoku={orignialSudoku.current} />\r\n            </div>\r\n            <div className='sudoku-board-sudoku-pad'>\r\n                <SudokuPad selectedCell={selectedCell} update={update} sudoku={sudoku} setSudoku={setSudoku} />\r\n            </div>\r\n            {selectedCell ? <div className='sudoku-board-magnified-cell'><MagnifiedCell selectedCell={selectedCell} /></div> : null}\r\n            <div className='clearFloat'></div>\r\n\r\n            <div><button onClick={getHint} id='hint-button'>Get Hint</button></div>\r\n            <select onChange={selectPuzzle}>\r\n                <option value='one'>Level One</option>\r\n                <option value='two'>Level Two</option>\r\n                <option value='three'>Level Three</option>\r\n                <option value='four'>Level Four</option>\r\n                <option value='five'>Level Five</option>\r\n            </select>\r\n        </div>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n\r\n\r\nexport default SudokuBoard;","import logo from './logo.svg';\nimport './App.css';\nimport SudokuBoard from './SudokuBoard/SudokuBoard.js';\nimport SudokuGrid from './SudokuGrid/SudokuGrid';\nfunction App() {\n  return <SudokuBoard />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}